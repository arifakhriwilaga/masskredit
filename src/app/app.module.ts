import { NgModule, ApplicationRef } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { RouterModule, ActivatedRoute }  from '@angular/router';
import { removeNgStyles, createNewHosts, createInputTransfer } from '@angularclass/hmr';
import { LocalStorageService, LOCAL_STORAGE_SERVICE_CONFIG } from 'angular-2-local-storage';
// import { AuthResolve }     from './authguard/auth-resolve.service';


import { HttpModule }   from '@angular/http';

// Module Auth
// import { LoginModule }     from './auth/login/app.login.module';
// import { AuthModule }  from './auth/app.auth.module';

import { FormsModule, ReactiveFormsModule } from '@angular/forms';
// import { FormsModule }   from '@angular/forms';
// import { HttpModule }    from '@angular/http';
// By default, the app generated by ng init will include the FormsModule, here weâ€™re requiring the ReactiveFormsModule as well
// import { AppComponent } from './app.component';
// Include the three components we created
// import { SimpleFormComponent } from './app.simpleform';
// import { ComplexFormComponent } from './app.complexform';
// import { FormValidationComponent } from './app.formvalidation';

// Authentication
import { AuthGuard  }            from './authguard/auth-guard.service';
import { AuthGuardDashboard }   from './authguard/auth-guard-dashboard.service';
import { AuthService }          from './authguard/auth.service';
import { LoginService }         from './auth/login/login.service';

/*
 * Platform and Environment providers/directives/pipes
 */
import { ENV_PROVIDERS } from './environment';
import { ROUTES }        from './app.routes';

// App is our top level component
import { AppComponent }                from './app.component';
import { APP_RESOLVER_PROVIDERS }      from './app.resolver';
import { AppState, InternalStateType } from './app.service';

// Component Auth
// import { AuthComponent }          from './auth/auth.component';
// import { RegisterComponent }      from './auth/register';
// import { Step1RegisterComponent } from './auth/register/step1';
// import { Step2RegisterComponent } from './auth/register/step2';
// import { Step3RegisterComponent } from './auth/register/step3';
// import { Step4RegisterComponent } from './auth/register/step4';
// import { LoginComponent }         from './auth/login/login.component';
// import { FooterAuthComponent }    from './auth/shared/footer';
// import { HeaderAuthComponent }    from './auth/shared/header';
// import { XLargeAuth }             from './auth/x-large';

// Component Home
// import { NoContentComponent } from './no-content';
// import { HomeComponent }      from './home/home.component';
// import { ContentComponent }   from './home/content';
// import { PendanaanComponent } from './home/pendanaan';
// import { PinjamanComponent }  from './home/pinjaman';
// import { FooterComponent }    from './home/shared/footer';
// import { HeaderComponent }    from './home/shared/header';
// import { XLarge }             from './home/x-large';

// Base Dashboard
// import { DashboardComponent }        from './dashboard';
// import { ContentDashboardComponent } from './dashboard/content';
// import { InvestasiComponent }        from './dashboard/investasi';
// import { CreateInvestasiComponent }  from './dashboard/investasi/create';
// import { PenarikanDanaComponent }    from './dashboard/penarikan_dana';
// import { PinjamanDashboardComponent }from './dashboard/pinjaman';
// import { TambahDanaComponent }       from './dashboard/tambah_dana';
// import { SidebarDashboardComponent } from './dashboard/shared/sidebar';
// import { HeaderDashboardComponent }  from './dashboard/shared/header';
// import { XLargeDashboard }           from './dashboard/x-large';

// Config LocalStorage
let localStorageServiceConfig = {
  prefix: 'my-app',
  storageType : 'sessionStorage' 
}

// Application wide providers
const APP_PROVIDERS = [
  ...APP_RESOLVER_PROVIDERS,
  AppState
];

type StoreType = {
  state: InternalStateType,
  restoreInputValues: () => void,
  disposeOldHosts: () => void
};

/**
 * `AppModule` is the main entry point into Angular2's bootstraping process
 */
@NgModule({
  bootstrap: [ AppComponent ],
  declarations: [
    AppComponent,

    // HomeComponent
    // HomeComponent,
    // NoContentComponent,
    // FooterComponent,
    // HeaderComponent,
    // ContentComponent,
    // PendanaanComponent,
    // PinjamanComponent,
    // AuthComponent,

    // Auth Component
    // AuthComponent,
    // XLargeAuth,
    // HeaderAuthComponent,
    // FooterAuthComponent,
    // LoginComponent,
    // RegisterComponent,
    // Step1RegisterComponent,
    // Step2RegisterComponent,
    // Step3RegisterComponent,
    // Step4RegisterComponent,

    //  DashboardComponent,
    // DashboardComponent,
    // XLargeDashboard,
    // HeaderDashboardComponent,
    // SidebarDashboardComponent,
    // ContentDashboardComponent,
    // InvestasiComponent,
    // CreateInvestasiComponent,
    // PenarikanDanaComponent,
    // PinjamanDashboardComponent,
    // TambahDanaComponent
  ],
  imports: [ // import Angular's modules
    ReactiveFormsModule,
    FormsModule,
    BrowserModule,
    HttpModule,
    // AuthModule,
 
    RouterModule.forRoot(ROUTES, { useHash: true })
  ],
  exports: [RouterModule],
  providers: [ // expose our Services and Providers into Angular's dependency injection
    ENV_PROVIDERS,
    APP_PROVIDERS,
    LocalStorageService,
    AuthGuard,
    AuthService,
    LoginService,
    AuthGuardDashboard,
    // LoginComponent,
    // AuthResolve,
      {
          provide: LOCAL_STORAGE_SERVICE_CONFIG, useValue: localStorageServiceConfig
      }
  ]
})

export class AppModule {
  constructor(public appRef: ApplicationRef, public appState: AppState) {}

  hmrOnInit(store: StoreType) {
    if (!store || !store.state) return;
    console.log('HMR store', JSON.stringify(store, null, 2));
    // set state
    this.appState._state = store.state;
    // set input values
    if ('restoreInputValues' in store) {
      let restoreInputValues = store.restoreInputValues;
      setTimeout(restoreInputValues);
    }

    this.appRef.tick();
    delete store.state;
    delete store.restoreInputValues;
  }

  hmrOnDestroy(store: StoreType) {
    const cmpLocation = this.appRef.components.map(cmp => cmp.location.nativeElement);
    // save state
    const state = this.appState._state;
    store.state = state;
    // recreate root elements
    store.disposeOldHosts = createNewHosts(cmpLocation);
    // save input values
    store.restoreInputValues  = createInputTransfer();
    // remove styles
    removeNgStyles();
  }

  hmrAfterDestroy(store: StoreType) {
    // display new elements
    store.disposeOldHosts();
    delete store.disposeOldHosts;
  }

}

